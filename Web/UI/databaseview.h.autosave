#ifndef DATABASEVIEW
#define DATABASEVIEW

// For usage of Qt native macro SIGNAL() and SLOT()
#ifndef WT_NO_SLOT_MACROS
#define WT_NO_SLOT_MACROS
#endif // WT_NO_SLOT_MACROS

// For disabling boost warnings
#ifndef BOOST_SIGNALS_NO_DEPRECATION_WARNING
#define BOOST_SIGNALS_NO_DEPRECATION_WARNING
#endif // BOOST_SIGNALS_NO_DEPRECATION_WARNING

#include <Wt/WContainerWidget>
#include <Wt/WIconPair>
#include <Wt/WTree>
#include <Wt/WTreeNode>

#include <QDateTime>
#include <QByteArray>

#include "Image/imagemanager.h"

using namespace Wt;

namespace Web
{
namespace Ui {

#define SURVEY_TYPE     1001
#define WOUND_TYPE      1002
#define PATIENT_TYPE    1003
#define DOCTOR_TYPE     1004

class Survey : public WTreeNode
{
    public : int id;
    public : QDateTime date;
    public : QString notes;
    public : cv::Mat image;
    public : std::vector<PolygonF> polygons;
    public : QPolygonF rulerPoints;
    public : double rulerFactor = 1.0;
    public : double woundArea = -1;
    public : Survey(
            int ID, 
            const QDateTime &date, 
            const std::string &notes,
            const double woundArea,
            WContainerWidget *parent,
            const std::string &iconPath = "icons/DatabaseView/Survey.png"):
        WTreeNode(
            date.toString("dd.MM.yyyy hh:mm") + " " + 
            ((woundArea != 0) ? (std::to_string(woundArea) + "sm<sup>2</sup>") : ("")), 
            new WIconPair(iconPath.data(),iconPath.data(),false,parent)),
        id(ID),
        date(date),
        notes(notes),
        woundArea(woundArea){}
    public : QByteArray packPolygons() const
    {
        QByteArray arr;
        char intSize = sizeof(int);
        arr.append(&intSize, 1);                            // size of int
        char doubleSize = sizeof(double);
        arr.append(&doubleSize, 1);                         // size of double
        int count = polygons.size();
        arr.append((char*)&count, sizeof(int));             // number of polygons <int>
        for(PolygonF p: polygons)
        {
            int countP = p.size();
            arr.append((char*)&countP, sizeof(int));        // number of nodes in polygons <int>
        }
        for(PolygonF p: polygons)
            for(Point2d n: p)
            {
                arr.append((char*)&n.x, sizeof(double));    // nodes of polygons <double>
                arr.append((char*)&n.y, sizeof(double));
            }
        return arr;
    }
    public : void unpackPolygons(QByteArray buf)
    {
        for(PolygonF *p = polygons.begin(); p!= polygons.end(); ++p)
            p->clear();
        polygons.clear();
        if(!buf.isEmpty())
        {
            char * ptr = buf.data();
            size_t intSize = *ptr;
            ptr += sizeof(char);
            size_t doubleSize = *ptr;
            ptr += sizeof(char);
            int polygonsCount = *(int*)(ptr);
            ptr += intSize;
            polygons.resize(polygonsCount);
            for(PolygonF *p = polygons.begin(); p!= polygons.end(); ++p)
            {
                int nodesCount = *(int*)(ptr);
                ptr += intSize;
                p->resize(nodesCount);
            }
            for(PolygonF *p = polygons.begin(); p!= polygons.end(); ++p)
                for(Point2d *n = p->begin(); n!= p->end(); ++n)
                {
                    n->x = *(double*)(ptr);
                    ptr += doubleSize;
                    n->y = *(double*)(ptr);
                    ptr += doubleSize;
                }
        }
    }
    public : QByteArray packRulerPoints() const
    {
        QByteArray arr;
        char intSize = sizeof(int);
        arr.append(&intSize, 1);                            // size of int
        char doubleSize = sizeof(double);
        arr.append(&doubleSize, 1);                         // size of double
        int count = rulerPoints.size();
        arr.append((char*)&count, sizeof(int));             // number of nodes <int>
        for(Point2d n: rulerPoints)
        {
            arr.append((char*)&n.x, sizeof(double));        // nodes of polygon <double>
            arr.append((char*)&n.y, sizeof(double));
        }
        return arr;
    }
    public : void unpackRulerPoints(QByteArray buf)
    {
        rulerPoints.clear();
        if(!buf.isEmpty())
        {
            char * ptr = buf.data();
            size_t intSize = *ptr;
            ptr += sizeof(char);
            size_t doubleSize = *ptr;
            ptr += sizeof(char);
            int nodesCount = *(int*)(ptr);
            ptr += intSize;
            rulerPoints.resize(nodesCount);
            for(Point2d *n = rulerPoints.begin(); n!= rulerPoints.end(); ++n)
            {
                n->x = *(double*)(ptr);
                ptr += doubleSize;
                n->y = *(double*)(ptr);
                ptr += doubleSize;
            }
        }
    }
    public : void setPolygonsAndRulerPoints(
            const std::vector<PolygonF> &p,
            const PolygonF &r)
    {
        for(PolygonF *_p = polygons.begin(); _p!= polygons.end(); ++_p)
            _p->clear();
        polygons.clear();
        rulerPoints.clear();

        polygons.resize(p.size());
        for(int i=0 ; i < polygons.size(); ++i)
            polygons[i] = p[i];
        rulerPoints = r;
    }
    public :~Survey()
    {
        for(PolygonF *p = polygons.begin(); p!= polygons.end(); ++p)
            p->clear();
        polygons.clear();
        rulerPoints.clear();
    }

    public : int type() const override { return SURVEY_TYPE;}
};

class Wound : public WTreeNode
{
    public : int id;
    public : QString name;
    public : QString notes;
    public : Wound(
            int ID, 
            const std::string &title, 
            const std::string &notes,
            WContainerWidget *parent,
            const std::string &iconPath = "icons/DatabaseView/Wound.png"):
        WTreeNode(title.data(), new WIconPair(iconPath.data(),iconPath.data(),false,parent)),
        id(ID),
        name(text),
        notes(notes){}
    public : int type() const override { return WOUND_TYPE;}
};

class Patient : public QStandardItem
{
    public : int id;
    public : QString name;
    public : QString notes;
    public : Wound(
            int ID, 
            const std::string &title, 
            const std::string &notes,
            WContainerWidget *parent,
            const std::string &iconPath = "icons/DatabaseView/Patient.png"):
        WTreeNode(title.data(), new WIconPair(iconPath.data(),iconPath.data(),false,parent)),
        id(ID),
        name(text),
        notes(notes){}
    public : int type() const override { return PATIENT_TYPE;}
};

class Doctor : public WTreeNode
{
    public : int id;
    public : std::string name;
    public : std::string notes;
    public : Doctor(
            const std::string &title, 
            int ID, 
            const std::string &notes,
            WContainerWidget *parent,
            const std::string &iconPath = "icons/DatabaseView/Doctor.png"):
        WTreeNode(title.data(), new WIconPair(iconPath.data(),iconPath.data(),false,parent)),
        id(ID),
        name(text),
        notes(notes){}
    public : int type() const override { return DOCTOR_TYPE;}
};

class DatabaseView : public WContainerWidget
{
    //    public : QStandardItemModel * model = nullptr;
    //    public : Doctor* doctor = nullptr;
    
    //    public : DatabaseModel(QObject * parent = 0): model(new QStandardItemModel(parent)){}
    //    public : void addDoctor(Doctor* newDoctor)
    //    {
    //        model->invisibleRootItem()->appendRow(newDoctor);
    //        doctor = newDoctor;
    //    }
    //    public : ~DatabaseModel(){}
    
    public:
    WTree *tree = nullptr;
    public : DatabaseView(WContainerWidget *parent) : WContainerWidget(parent)
    {
        WIconPair *doctorIcon = new WIconPair("icons/DatabaseView/Doctor.png",
                                          "icons/DatabaseView/Doctor.png",
                                          false,this);
        WIconPair *patientIcon1 = new WIconPair("icons/DatabaseView/Patient.png",
                                          "icons/DatabaseView/Patient.png",
                                          false,this);
        WIconPair *patientIcon2 = new WIconPair("icons/DatabaseView/Patient.png",
                                          "icons/DatabaseView/Patient.png",
                                          false,this);
        WIconPair *woundIcon1 = new WIconPair("icons/DatabaseView/Wound.png",
                                          "icons/DatabaseView/Wound.png",
                                          false,this);
        WIconPair *woundIcon2 = new WIconPair("icons/DatabaseView/Wound.png",
                                          "icons/DatabaseView/Wound.png",
                                          false,this);
        WIconPair *woundIcon3 = new WIconPair("icons/DatabaseView/Wound.png",
                                          "icons/DatabaseView/Wound.png",
                                          false,this);
        WIconPair *surveyIcon1 = new WIconPair("icons/DatabaseView/Survey.png",
                                          "icons/DatabaseView/Survey.png",
                                          false,this);
        tree = new WTree(this);
        tree->setSelectionMode(SingleSelection);

        WTreeNode *doctor = new WTreeNode("Doctor 1",doctorIcon);
        tree->setTreeRoot(doctor);
        WTreeNode *patient1 = new WTreeNode("Patient 1",patientIcon1,doctor);
        WTreeNode *patient2 = new WTreeNode("Patient 2",patientIcon2,doctor);
        WTreeNode *wound1 = new WTreeNode("Wound 1",woundIcon1,patient1);
        WTreeNode *wound2 = new WTreeNode("Wound 2",woundIcon2,patient1);
        WTreeNode *wound3 = new WTreeNode("Wound 3",woundIcon3,patient2);
        WTreeNode *survey1 = new WTreeNode("Survey 1",surveyIcon1,wound1);
    }
    public: ~DatabaseView(){}
};
}
}

#endif // DATABASEVIEW

